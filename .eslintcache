[{"/Users/nata/Documents/chatbots/src/index.ts":"1","/Users/nata/Documents/chatbots/src/routes/index.ts":"2","/Users/nata/Documents/chatbots/src/db/initdb.ts":"3"},{"size":705,"mtime":1626039080032,"results":"4","hashOfConfig":"5"},{"size":2935,"mtime":1626037169752,"results":"6","hashOfConfig":"5"},{"size":944,"mtime":1625866208905,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gsxo16",{"filePath":"10","messages":"11","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/nata/Documents/chatbots/src/index.ts",[],"/Users/nata/Documents/chatbots/src/routes/index.ts",["16","17","18","19","20","21","22","23"],"/* eslint-disable import/prefer-default-export */\nimport * as express from 'express';\nimport fetch from 'node-fetch';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport pgPromise from 'pg-promise';\n\ndotenv.config({ path: path.resolve(__dirname, '../../.env') });\n\nconst url = process.env.URL;\nconsole.log(url);\n\nasync function sendRequest() {\n  const response = await fetch(url);\n  const data = await response.json();\n  console.log(data);\n  const match = new RegExp(/\\.(jpg|JPG|png|PNG|gif|jpeg)/g);\n  if (!match.test(data.url)) {\n    return sendRequest();\n  }\n  return data.url;\n}\n\nexport const register = (app: express.Express): void => {\n  const port = parseInt(process.env.PGPORT, 10);\n  const config = {\n    database: process.env.PGDATABASE,\n    host: process.env.PGHOST,\n    port,\n    user: process.env.PGUSER,\n  };\n\n  const pgp = pgPromise();\n  const db = pgp(config);\n\n  app.get('/', (_req: unknown, res) => {\n    res.render('index', {\n      title: 'Hey', message: 'Hello there!', getImage: '/image', listImages: '/list/dog/images',\n    });\n  });\n\n  app.post('/upload/dog/image', async (req, res) => {\n    console.log(req.body);\n    try {\n      const id = await db.one(`\n                INSERT INTO images( url, width, height )\n                VALUES( $[url], $[width], $[height])\n                RETURNING id;`,\n      { ...req.body });\n      res.json({ id });\n    } catch (err) {\n      res.json({ error: err.message || err });\n    }\n  });\n\n  app.get('/image', async (_req, res) => {\n    const imageUrl = await sendRequest();\n    res.render('image', { getURI: 'Hey', url: imageUrl });\n  });\n\n  app.get('/list/dog/images', async (req: any, res) => {\n    try {\n      const images = await db.any(`\n                SELECT\n                    id\n                    , url\n                    , width\n                    , height\n                FROM    images\n                ORDER BY id`);\n      res.json(images);\n    } catch (err) {\n      res.json({ error: err.message || err });\n    }\n  });\n\n  app.get('/list/dog/images/view', async (req: any, res) => {\n    try {\n      const images = await db.any(`\n                SELECT\n                    id\n                    , url\n                    , width\n                    , height\n                FROM    images\n                ORDER BY id`);\n      res.render('list', { results: images });\n    } catch (err) {\n      // tslint:disable-next-line:no-console\n      console.error(err);\n      res.json({ error: err.message || err });\n    }\n  });\n\n  app.get('/list/dog/images/remove/:id', async (req: any, res) => {\n    try {\n      const id = await db.result(`\n                DELETE\n                FROM    images\n                WHERE   id = $[id]`,\n      { id: req.params.id }, (r) => r.rowCount);\n      res.json({ id });\n    } catch (err) {\n      // tslint:disable-next-line:no-console\n      console.error(err);\n      res.json({ error: err.message || err });\n    }\n  });\n};\n","/Users/nata/Documents/chatbots/src/db/initdb.ts",["24","25","26"],"import fs from 'fs-extra';\nimport { Client } from 'pg';\nimport dotenv from 'dotenv';\nimport path from 'path';\n\ndotenv.config({ path: path.resolve(__dirname, '../../.env') });\n\nconst init = async () => {\n  const client = new Client();\n  try {\n    await client.connect();\n    // init db from file\n    const sql = await fs.readFile(`${__dirname}/initdb.pgsql`, { encoding: 'UTF-8' });\n    const statements = sql.split(/;\\s*$/m);\n    // eslint-disable-next-line no-restricted-syntax\n    for (const statement of statements) {\n      if (statement.length > 3) {\n        // execute each of the statements\n        // eslint-disable-next-line no-await-in-loop\n        await client.query(statement);\n      }\n    }\n  } catch (err) {\n    console.log(err);\n    throw err;\n  } finally {\n    // close the database client\n    await client.end();\n  }\n};\n\ninit().then(() => {\n  console.log('finished');\n}).catch(() => {\n  console.log('finished with errors');\n});\n",{"ruleId":"27","severity":1,"message":"28","line":11,"column":1,"nodeType":"29","messageId":"30","endLine":11,"endColumn":12},{"ruleId":"27","severity":1,"message":"28","line":16,"column":3,"nodeType":"29","messageId":"30","endLine":16,"endColumn":14},{"ruleId":"27","severity":1,"message":"28","line":43,"column":5,"nodeType":"29","messageId":"30","endLine":43,"endColumn":16},{"ruleId":"31","severity":1,"message":"32","line":61,"column":43,"nodeType":"33","messageId":"34","endLine":61,"endColumn":46,"suggestions":"35"},{"ruleId":"31","severity":1,"message":"32","line":77,"column":48,"nodeType":"33","messageId":"34","endLine":77,"endColumn":51,"suggestions":"36"},{"ruleId":"27","severity":1,"message":"28","line":90,"column":7,"nodeType":"29","messageId":"30","endLine":90,"endColumn":20},{"ruleId":"31","severity":1,"message":"32","line":95,"column":54,"nodeType":"33","messageId":"34","endLine":95,"endColumn":57,"suggestions":"37"},{"ruleId":"27","severity":1,"message":"28","line":105,"column":7,"nodeType":"29","messageId":"30","endLine":105,"endColumn":20},{"ruleId":"27","severity":1,"message":"28","line":24,"column":5,"nodeType":"29","messageId":"30","endLine":24,"endColumn":16},{"ruleId":"27","severity":1,"message":"28","line":33,"column":3,"nodeType":"29","messageId":"30","endLine":33,"endColumn":14},{"ruleId":"27","severity":1,"message":"28","line":35,"column":3,"nodeType":"29","messageId":"30","endLine":35,"endColumn":14},"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["38","39"],["40","41"],["42","43"],{"messageId":"44","fix":"45","desc":"46"},{"messageId":"47","fix":"48","desc":"49"},{"messageId":"44","fix":"50","desc":"46"},{"messageId":"47","fix":"51","desc":"49"},{"messageId":"44","fix":"52","desc":"46"},{"messageId":"47","fix":"53","desc":"49"},"suggestUnknown",{"range":"54","text":"55"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"54","text":"56"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"57","text":"55"},{"range":"57","text":"56"},{"range":"58","text":"55"},{"range":"58","text":"56"},[1652,1655],"unknown","never",[2055,2058],[2558,2561]]